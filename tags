!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
AM_YFLAGS	Makefile	/^AM_YFLAGS = -d$/;"	m
AND	y.tab.c	/^    AND = 258,                     \/* AND  *\/$/;"	e	enum:yytokentype	file:
AND	y.tab.c	/^#define AND /;"	d	file:
AND	y.tab.h	/^#define AND 258$/;"	M
Args	shadosh.h	/^struct Args {$/;"	s
Args	shadosh.h	/^typedef struct Args Args;$/;"	t	typeref:struct:Args
BDIR	Makefile	/^BDIR=\/usr\/local$/;"	m
BEGIN	lex.yy.c	/^#define BEGIN /;"	d	file:
BLOCKSIZE	nalloc.c	/^#define BLOCKSIZE /;"	d	file:
Block	nalloc.c	/^static struct Block {$/;"	s	file:
Block	shadosh.h	/^typedef struct Block Block;$/;"	t	typeref:struct:Block
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-lreadline -g -Wno-deprecated$/;"	m
CR	y.tab.c	/^    CR = 265,                      \/* CR  *\/$/;"	e	enum:yytokentype	file:
CR	y.tab.c	/^#define CR /;"	d	file:
CR	y.tab.h	/^#define CR 265$/;"	M
ECHO	lex.yy.c	/^#define ECHO /;"	d	file:
ECHO	lex.yy.c	/^ECHO;$/;"	v	typeref:typename:YY_RULE_SETUP
ELSE	y.tab.c	/^    ELSE = 259,                    \/* ELSE  *\/$/;"	e	enum:yytokentype	file:
ELSE	y.tab.c	/^#define ELSE /;"	d	file:
ELSE	y.tab.h	/^#define ELSE 259$/;"	M
END	y.tab.c	/^    END = 260,                     \/* END  *\/$/;"	e	enum:yytokentype	file:
END	y.tab.c	/^#define END /;"	d	file:
END	y.tab.h	/^#define END 260$/;"	M
EOB_ACT_CONTINUE_SCAN	lex.yy.c	/^#define EOB_ACT_CONTINUE_SCAN /;"	d	file:
EOB_ACT_END_OF_FILE	lex.yy.c	/^#define EOB_ACT_END_OF_FILE /;"	d	file:
EOB_ACT_LAST_MATCH	lex.yy.c	/^#define EOB_ACT_LAST_MATCH /;"	d	file:
EOF	shadosh.h	/^#define EOF /;"	d
EXIT_CMD	y.tab.c	/^    EXIT_CMD = 264,                \/* EXIT_CMD  *\/$/;"	e	enum:yytokentype	file:
EXIT_CMD	y.tab.c	/^#define EXIT_CMD /;"	d	file:
EXIT_CMD	y.tab.h	/^#define EXIT_CMD 264$/;"	M
EXIT_STATUS	shadosh.c	/^#define EXIT_STATUS /;"	d	file:
EXIT_STATUS	shadosh.h	/^#define EXIT_STATUS /;"	d
EXIT_SUCCESS	y.tab.c	/^#      define EXIT_SUCCESS /;"	d	file:
EXIT_SUCCESS	y.tab.c	/^#    define EXIT_SUCCESS /;"	d	file:
FALSE	shadosh.h	/^	FALSE, TRUE$/;"	e	enum:__anon5cf01dc50103
FLEXINT_H	lex.yy.c	/^#define FLEXINT_H$/;"	d	file:
FLEX_BETA	lex.yy.c	/^#define FLEX_BETA$/;"	d	file:
FLEX_SCANNER	lex.yy.c	/^#define FLEX_SCANNER$/;"	d	file:
IF	y.tab.c	/^    IF = 261,                      \/* IF  *\/$/;"	e	enum:yytokentype	file:
IF	y.tab.c	/^#define IF /;"	d	file:
IF	y.tab.h	/^#define IF 261$/;"	M
INITIAL	lex.yy.c	/^#define INITIAL /;"	d	file:
INT16_MAX	lex.yy.c	/^#define INT16_MAX /;"	d	file:
INT16_MIN	lex.yy.c	/^#define INT16_MIN /;"	d	file:
INT32_MAX	lex.yy.c	/^#define INT32_MAX /;"	d	file:
INT32_MIN	lex.yy.c	/^#define INT32_MIN /;"	d	file:
INT8_MAX	lex.yy.c	/^#define INT8_MAX /;"	d	file:
INT8_MIN	lex.yy.c	/^#define INT8_MIN /;"	d	file:
MAXCHAR	shadosh.c	/^#define MAXCHAR /;"	d	file:
MAXLEN	shadosh.h	/^#define MAXLEN /;"	d
MAXLIST	shadosh.c	/^#define MAXLIST /;"	d	file:
MAXMEM	nalloc.c	/^#define MAXMEM /;"	d	file:
NULL	shadosh.h	/^#define NULL /;"	d
Node	shadosh.h	/^struct Node {$/;"	s
Node	shadosh.h	/^typedef struct Node Node;$/;"	t	typeref:struct:Node
OBJ	Makefile	/^OBJ=shadosh.o exec.c node.c args.c nalloc.c exec.c y.tab.c lex.yy.c$/;"	m
OR	y.tab.c	/^    OR = 263,                      \/* OR  *\/$/;"	e	enum:yytokentype	file:
OR	y.tab.c	/^#define OR /;"	d	file:
OR	y.tab.h	/^#define OR 263$/;"	M
PIPE	y.tab.c	/^    PIPE = 267                     \/* PIPE  *\/$/;"	e	enum:yytokentype	file:
PIPE	y.tab.c	/^#define PIPE /;"	d	file:
PIPE	y.tab.h	/^#define PIPE 267$/;"	M
PROMPT	shadosh.c	/^#define PROMPT /;"	d	file:
PROMPT_DIR	shadosh.c	/^#define PROMPT_DIR /;"	d	file:
Pipe	shadosh.h	/^struct Pipe {$/;"	s
Pipe	shadosh.h	/^typedef struct Pipe Pipe;$/;"	t	typeref:struct:Pipe
REJECT	lex.yy.c	/^#define REJECT /;"	d	file:
SIZE_MAX	lex.yy.c	/^#define SIZE_MAX /;"	d	file:
ShadoShell	README.md	/^# ShadoShell$/;"	c
TRUE	shadosh.h	/^	FALSE, TRUE$/;"	e	enum:__anon5cf01dc50103
UINT16_MAX	lex.yy.c	/^#define UINT16_MAX /;"	d	file:
UINT32_MAX	lex.yy.c	/^#define UINT32_MAX /;"	d	file:
UINT8_MAX	lex.yy.c	/^#define UINT8_MAX /;"	d	file:
WHILE	y.tab.c	/^    WHILE = 262,                   \/* WHILE  *\/$/;"	e	enum:yytokentype	file:
WHILE	y.tab.c	/^#define WHILE /;"	d	file:
WHILE	y.tab.h	/^#define WHILE 262$/;"	M
WORD	y.tab.c	/^    WORD = 266,                    \/* WORD  *\/$/;"	e	enum:yytokentype	file:
WORD	y.tab.c	/^#define WORD /;"	d	file:
WORD	y.tab.h	/^#define WORD 266$/;"	M
Word	shadosh.h	/^typedef struct Word Word;$/;"	t	typeref:struct:Word
Wordlist	shadosh.h	/^struct Wordlist {$/;"	s
Wordlist	shadosh.h	/^typedef struct Wordlist Wordlist;$/;"	t	typeref:struct:Wordlist
YYABORT	y.tab.c	/^#define YYABORT /;"	d	file:
YYACCEPT	y.tab.c	/^#define YYACCEPT /;"	d	file:
YYBACKUP	y.tab.c	/^#define YYBACKUP(/;"	d	file:
YYBISON	y.tab.c	/^#define YYBISON /;"	d	file:
YYBISON_VERSION	y.tab.c	/^#define YYBISON_VERSION /;"	d	file:
YYCOPY	y.tab.c	/^#   define YYCOPY(/;"	d	file:
YYCOPY_NEEDED	y.tab.c	/^# define YYCOPY_NEEDED /;"	d	file:
YYDEBUG	y.tab.c	/^# define YYDEBUG /;"	d	file:
YYDEBUG	y.tab.h	/^# define YYDEBUG 0$/;"	M
YYDPRINTF	y.tab.c	/^# define YYDPRINTF(/;"	d	file:
YYEMPTY	y.tab.c	/^    YYEMPTY = -2,$/;"	e	enum:yytokentype	file:
YYENOMEM	y.tab.c	/^enum { YYENOMEM = -2 };$/;"	e	enum:__anond9bd93f40103	file:
YYEOF	y.tab.c	/^    YYEOF = 0,                     \/* "end of file"  *\/$/;"	e	enum:yytokentype	file:
YYEOF	y.tab.c	/^#define YYEOF /;"	d	file:
YYEOF	y.tab.h	/^#define YYEOF 0$/;"	M
YYERRCODE	y.tab.c	/^#define YYERRCODE /;"	d	file:
YYERROR	y.tab.c	/^#define YYERROR /;"	d	file:
YYFINAL	y.tab.c	/^#define YYFINAL /;"	d	file:
YYFPRINTF	y.tab.c	/^#  define YYFPRINTF /;"	d	file:
YYFREE	y.tab.c	/^#   define YYFREE /;"	d	file:
YYINITDEPTH	y.tab.c	/^# define YYINITDEPTH /;"	d	file:
YYLAST	y.tab.c	/^#define YYLAST /;"	d	file:
YYMALLOC	y.tab.c	/^#   define YYMALLOC /;"	d	file:
YYMAXDEPTH	y.tab.c	/^# define YYMAXDEPTH /;"	d	file:
YYMAXUTOK	y.tab.c	/^#define YYMAXUTOK /;"	d	file:
YYNNTS	y.tab.c	/^#define YYNNTS /;"	d	file:
YYNRULES	y.tab.c	/^#define YYNRULES /;"	d	file:
YYNSTATES	y.tab.c	/^#define YYNSTATES /;"	d	file:
YYNTOKENS	y.tab.c	/^#define YYNTOKENS /;"	d	file:
YYPACT_NINF	y.tab.c	/^#define YYPACT_NINF /;"	d	file:
YYPOPSTACK	y.tab.c	/^#define YYPOPSTACK(/;"	d	file:
YYPTRDIFF_MAXIMUM	y.tab.c	/^#  define YYPTRDIFF_MAXIMUM /;"	d	file:
YYPTRDIFF_T	y.tab.c	/^#  define YYPTRDIFF_T /;"	d	file:
YYPULL	y.tab.c	/^#define YYPULL /;"	d	file:
YYPURE	y.tab.c	/^#define YYPURE /;"	d	file:
YYPUSH	y.tab.c	/^#define YYPUSH /;"	d	file:
YYRECOVERING	y.tab.c	/^#define YYRECOVERING(/;"	d	file:
YYSIZEOF	y.tab.c	/^#define YYSIZEOF(/;"	d	file:
YYSIZE_MAXIMUM	y.tab.c	/^#define YYSIZE_MAXIMUM /;"	d	file:
YYSIZE_T	y.tab.c	/^#  define YYSIZE_T /;"	d	file:
YYSKELETON_NAME	y.tab.c	/^#define YYSKELETON_NAME /;"	d	file:
YYSTACK_ALLOC	y.tab.c	/^#    define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC	y.tab.c	/^#  define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC_MAXIMUM	y.tab.c	/^#   define YYSTACK_ALLOC_MAXIMUM /;"	d	file:
YYSTACK_BYTES	y.tab.c	/^# define YYSTACK_BYTES(/;"	d	file:
YYSTACK_FREE	y.tab.c	/^#  define YYSTACK_FREE /;"	d	file:
YYSTACK_FREE	y.tab.c	/^#  define YYSTACK_FREE(/;"	d	file:
YYSTACK_GAP_MAXIMUM	y.tab.c	/^# define YYSTACK_GAP_MAXIMUM /;"	d	file:
YYSTACK_RELOCATE	y.tab.c	/^# define YYSTACK_RELOCATE(/;"	d	file:
YYSTATE	lex.yy.c	/^#define YYSTATE /;"	d	file:
YYSTYPE	y.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	y.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	y.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t
YYSTYPE_IS_DECLARED	y.tab.c	/^# define YYSTYPE_IS_DECLARED /;"	d	file:
YYSTYPE_IS_DECLARED	y.tab.h	/^# define YYSTYPE_IS_DECLARED 1$/;"	M
YYSTYPE_IS_TRIVIAL	y.tab.c	/^# define YYSTYPE_IS_TRIVIAL /;"	d	file:
YYSTYPE_IS_TRIVIAL	y.tab.h	/^# define YYSTYPE_IS_TRIVIAL 1$/;"	M
YYSYMBOL_11_n_	y.tab.c	/^  YYSYMBOL_11_n_ = 11,                     \/* '\\n'  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_14_	y.tab.c	/^  YYSYMBOL_14_ = 14,                       \/* '&'  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_15_	y.tab.c	/^  YYSYMBOL_15_ = 15,                       \/* ';'  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_AND	y.tab.c	/^  YYSYMBOL_AND = 3,                        \/* AND  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_CR	y.tab.c	/^  YYSYMBOL_CR = 10,                        \/* CR  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_ELSE	y.tab.c	/^  YYSYMBOL_ELSE = 4,                       \/* ELSE  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_END	y.tab.c	/^  YYSYMBOL_END = 5,                        \/* END  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_EXIT_CMD	y.tab.c	/^  YYSYMBOL_EXIT_CMD = 9,                   \/* EXIT_CMD  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_IF	y.tab.c	/^  YYSYMBOL_IF = 6,                         \/* IF  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_OR	y.tab.c	/^  YYSYMBOL_OR = 8,                         \/* OR  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_PIPE	y.tab.c	/^  YYSYMBOL_PIPE = 13,                      \/* PIPE  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_WHILE	y.tab.c	/^  YYSYMBOL_WHILE = 7,                      \/* WHILE  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_WORD	y.tab.c	/^  YYSYMBOL_WORD = 12,                      \/* WORD  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_YYACCEPT	y.tab.c	/^  YYSYMBOL_YYACCEPT = 16,                  \/* $accept  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_YYEMPTY	y.tab.c	/^  YYSYMBOL_YYEMPTY = -2,$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_YYEOF	y.tab.c	/^  YYSYMBOL_YYEOF = 0,                      \/* "end of file"  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_YYUNDEF	y.tab.c	/^  YYSYMBOL_YYUNDEF = 2,                    \/* "invalid token"  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_YYerror	y.tab.c	/^  YYSYMBOL_YYerror = 1,                    \/* error  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_basic	y.tab.c	/^  YYSYMBOL_basic = 24,                     \/* basic  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_body	y.tab.c	/^  YYSYMBOL_body = 22,                      \/* body  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_cmd	y.tab.c	/^  YYSYMBOL_cmd = 25,                       \/* cmd  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_end	y.tab.c	/^  YYSYMBOL_end = 18,                       \/* end  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_exit	y.tab.c	/^  YYSYMBOL_exit = 26,                      \/* exit  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_line	y.tab.c	/^  YYSYMBOL_line = 21,                      \/* line  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_nlop	y.tab.c	/^  YYSYMBOL_nlop = 27                       \/* nlop  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_sa_cmd	y.tab.c	/^  YYSYMBOL_sa_cmd = 19,                    \/* sa_cmd  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_san_cmd	y.tab.c	/^  YYSYMBOL_san_cmd = 20,                   \/* san_cmd  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_shadosh	y.tab.c	/^  YYSYMBOL_shadosh = 17,                   \/* shadosh  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYSYMBOL_word	y.tab.c	/^  YYSYMBOL_word = 23,                      \/* word  *\/$/;"	e	enum:yysymbol_kind_t	file:
YYTABLES_NAME	lex.yy.c	/^#define YYTABLES_NAME /;"	d	file:
YYTABLE_NINF	y.tab.c	/^#define YYTABLE_NINF /;"	d	file:
YYTOKENTYPE	y.tab.c	/^# define YYTOKENTYPE$/;"	d	file:
YYTOKENTYPE	y.tab.h	/^# define YYTOKENTYPE$/;"	M
YYTRANSLATE	y.tab.c	/^#define YYTRANSLATE(/;"	d	file:
YYUNDEF	y.tab.c	/^    YYUNDEF = 257,                 \/* "invalid token"  *\/$/;"	e	enum:yytokentype	file:
YYUNDEF	y.tab.c	/^#define YYUNDEF /;"	d	file:
YYUNDEF	y.tab.h	/^#define YYUNDEF 257$/;"	M
YYUSE	y.tab.c	/^# define YYUSE(/;"	d	file:
YY_	y.tab.c	/^#   define YY_(/;"	d	file:
YY_	y.tab.c	/^#  define YY_(/;"	d	file:
YY_ACCESSING_SYMBOL	y.tab.c	/^#define YY_ACCESSING_SYMBOL(/;"	d	file:
YY_ASSERT	y.tab.c	/^#define YY_ASSERT(/;"	d	file:
YY_ATTRIBUTE_PURE	y.tab.c	/^#  define YY_ATTRIBUTE_PURE /;"	d	file:
YY_ATTRIBUTE_PURE	y.tab.c	/^#  define YY_ATTRIBUTE_PURE$/;"	d	file:
YY_ATTRIBUTE_UNUSED	y.tab.c	/^#  define YY_ATTRIBUTE_UNUSED /;"	d	file:
YY_ATTRIBUTE_UNUSED	y.tab.c	/^#  define YY_ATTRIBUTE_UNUSED$/;"	d	file:
YY_AT_BOL	lex.yy.c	/^#define YY_AT_BOL(/;"	d	file:
YY_BREAK	lex.yy.c	/^#define YY_BREAK /;"	d	file:
YY_BUFFER_EOF_PENDING	lex.yy.c	/^#define YY_BUFFER_EOF_PENDING /;"	d	file:
YY_BUFFER_NEW	lex.yy.c	/^#define YY_BUFFER_NEW /;"	d	file:
YY_BUFFER_NORMAL	lex.yy.c	/^#define YY_BUFFER_NORMAL /;"	d	file:
YY_BUFFER_STATE	lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state *	file:
YY_BUF_SIZE	lex.yy.c	/^#define YY_BUF_SIZE /;"	d	file:
YY_CAST	y.tab.c	/^#   define YY_CAST(/;"	d	file:
YY_CHAR	lex.yy.c	/^typedef flex_uint8_t YY_CHAR;$/;"	t	typeref:typename:flex_uint8_t	file:
YY_CURRENT_BUFFER	lex.yy.c	/^#define YY_CURRENT_BUFFER /;"	d	file:
YY_CURRENT_BUFFER_LVALUE	lex.yy.c	/^#define YY_CURRENT_BUFFER_LVALUE /;"	d	file:
YY_DECL	lex.yy.c	/^#define YY_DECL /;"	d	file:
YY_DECL_IS_OURS	lex.yy.c	/^#define YY_DECL_IS_OURS /;"	d	file:
YY_DO_BEFORE_ACTION	lex.yy.c	/^#define YY_DO_BEFORE_ACTION /;"	d	file:
YY_END_OF_BUFFER	lex.yy.c	/^#define YY_END_OF_BUFFER /;"	d	file:
YY_END_OF_BUFFER_CHAR	lex.yy.c	/^#define YY_END_OF_BUFFER_CHAR /;"	d	file:
YY_EXIT_FAILURE	lex.yy.c	/^#define YY_EXIT_FAILURE /;"	d	file:
YY_EXTRA_TYPE	lex.yy.c	/^#define YY_EXTRA_TYPE /;"	d	file:
YY_FATAL_ERROR	lex.yy.c	/^#define YY_FATAL_ERROR(/;"	d	file:
YY_FLEX_MAJOR_VERSION	lex.yy.c	/^#define YY_FLEX_MAJOR_VERSION /;"	d	file:
YY_FLEX_MINOR_VERSION	lex.yy.c	/^#define YY_FLEX_MINOR_VERSION /;"	d	file:
YY_FLEX_SUBMINOR_VERSION	lex.yy.c	/^#define YY_FLEX_SUBMINOR_VERSION /;"	d	file:
YY_FLUSH_BUFFER	lex.yy.c	/^#define YY_FLUSH_BUFFER /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN$/;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_END /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_END$/;"	d	file:
YY_IGNORE_USELESS_CAST_BEGIN	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_BEGIN /;"	d	file:
YY_IGNORE_USELESS_CAST_BEGIN	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_BEGIN$/;"	d	file:
YY_IGNORE_USELESS_CAST_END	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_END /;"	d	file:
YY_IGNORE_USELESS_CAST_END	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_END$/;"	d	file:
YY_INITIAL_VALUE	y.tab.c	/^# define YY_INITIAL_VALUE(/;"	d	file:
YY_INPUT	lex.yy.c	/^#define YY_INPUT(/;"	d	file:
YY_INT_ALIGNED	lex.yy.c	/^#define  YY_INT_ALIGNED /;"	d	file:
YY_LESS_LINENO	lex.yy.c	/^    #define YY_LESS_LINENO(/;"	d	file:
YY_LINENO_REWIND_TO	lex.yy.c	/^    #define YY_LINENO_REWIND_TO(/;"	d	file:
YY_LOCATION_PRINT	y.tab.c	/^#  define YY_LOCATION_PRINT(/;"	d	file:
YY_MORE_ADJ	lex.yy.c	/^#define YY_MORE_ADJ /;"	d	file:
YY_NEW_FILE	lex.yy.c	/^#define YY_NEW_FILE /;"	d	file:
YY_NULL	lex.yy.c	/^#define YY_NULL /;"	d	file:
YY_NULLPTR	y.tab.c	/^#    define YY_NULLPTR /;"	d	file:
YY_NULLPTR	y.tab.c	/^#   define YY_NULLPTR /;"	d	file:
YY_NUM_RULES	lex.yy.c	/^#define YY_NUM_RULES /;"	d	file:
YY_READ_BUF_SIZE	lex.yy.c	/^#define YY_READ_BUF_SIZE /;"	d	file:
YY_REDUCE_PRINT	y.tab.c	/^# define YY_REDUCE_PRINT(/;"	d	file:
YY_REINTERPRET_CAST	y.tab.c	/^#   define YY_REINTERPRET_CAST(/;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	lex.yy.c	/^#define YY_RESTORE_YY_MORE_OFFSET$/;"	d	file:
YY_RULE_SETUP	lex.yy.c	/^#define YY_RULE_SETUP /;"	d	file:
YY_SC_TO_UI	lex.yy.c	/^#define YY_SC_TO_UI(/;"	d	file:
YY_STACK_PRINT	y.tab.c	/^# define YY_STACK_PRINT(/;"	d	file:
YY_START	lex.yy.c	/^#define YY_START /;"	d	file:
YY_START_STACK_INCR	lex.yy.c	/^#define YY_START_STACK_INCR /;"	d	file:
YY_STATE_BUF_SIZE	lex.yy.c	/^#define YY_STATE_BUF_SIZE /;"	d	file:
YY_STATE_EOF	lex.yy.c	/^#define YY_STATE_EOF(/;"	d	file:
YY_STDINT_H	y.tab.c	/^#  define YY_STDINT_H$/;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	lex.yy.c	/^#define YY_STRUCT_YY_BUFFER_STATE$/;"	d	file:
YY_SYMBOL_PRINT	y.tab.c	/^# define YY_SYMBOL_PRINT(/;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	lex.yy.c	/^#define YY_TYPEDEF_YY_BUFFER_STATE$/;"	d	file:
YY_TYPEDEF_YY_SIZE_T	lex.yy.c	/^#define YY_TYPEDEF_YY_SIZE_T$/;"	d	file:
YY_USER_ACTION	lex.yy.c	/^#define YY_USER_ACTION$/;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	y.tab.c	/^# define YY_YY_Y_TAB_H_INCLUDED$/;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	y.tab.h	/^# define YY_YY_Y_TAB_H_INCLUDED$/;"	M
YYerror	y.tab.c	/^    YYerror = 256,                 \/* error  *\/$/;"	e	enum:yytokentype	file:
YYerror	y.tab.c	/^#define YYerror /;"	d	file:
YYerror	y.tab.h	/^#define YYerror 256$/;"	M
__STDC_LIMIT_MACROS	lex.yy.c	/^#define __STDC_LIMIT_MACROS /;"	d	file:
__anon5cf01dc50103	shadosh.h	/^typedef enum bool {$/;"	g
__anon5cf01dc50103	shadosh.h	/^} bool;$/;"	t	typeref:enum:bool
__anon5cf01dc5020a	shadosh.h	/^    union {$/;"	u	struct:Node
__anond9bd93f40103	y.tab.c	/^enum { YYENOMEM = -2 };$/;"	g	file:
add_word	args.c	/^extern Args add_word(Args a, char *w) {$/;"	f	typeref:typename:Args
align_t	shadosh.h	/^typedef long align_t;$/;"	t	typeref:typename:long
alignto	nalloc.c	/^#define alignto(/;"	d	file:
alloca	y.tab.c	/^#    define alloca /;"	d	file:
args	lex.yy.c	/^Args args;$/;"	v	typeref:typename:Args
args	shadosh.h	/^    char *main, **args;$/;"	m	struct:Args	typeref:typename:char ***
args	y.tab.c	/^    struct Args args;$/;"	m	union:YYSTYPE	typeref:struct:Args	file:
basic	parse.y	/^basic      : word$/;"	l
body	parse.y	/^body       : cmd $/;"	l
c	y.tab.c	/^    char *keyword, *c;$/;"	m	union:YYSTYPE	typeref:typename:char **	file:
clean	Makefile	/^clean:$/;"	t
clear	shadosh.c	/^#define clear(/;"	d	file:
cmd	parse.y	/^cmd        : \/* empty *\/    %prec WHILE      { $$ = NULL; }$/;"	l
cp_line	lex.yy.c	/^cp_line = 0; return CR; \/\/ ignore newline$/;"	v	typeref:typename:YY_RULE_SETUP
cp_line	lex.yy.c	/^int cp_line = 0;$/;"	v	typeref:typename:int
delobj	Makefile	/^delobj:$/;"	t
end	parse.y	/^end        : END            { YYABORT; }$/;"	l
exec_cmd	exec.c	/^extern int exec_cmd(Args args) {$/;"	f	typeref:typename:int
exit	parse.y	/^exit       : EXIT_CMD CR            {printf("TEST\\n"); exit(0); }$/;"	l
fl	nalloc.c	/^} *fl, *ul;$/;"	v	typeref:struct:Block *
flex_int16_t	lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	typeref:typename:int16_t	file:
flex_int16_t	lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	typeref:typename:short int	file:
flex_int32_t	lex.yy.c	/^typedef int flex_int32_t;$/;"	t	typeref:typename:int	file:
flex_int32_t	lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	typeref:typename:int32_t	file:
flex_int8_t	lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	typeref:typename:int8_t	file:
flex_int8_t	lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	typeref:typename:signed char	file:
flex_uint16_t	lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	typeref:typename:uint16_t	file:
flex_uint16_t	lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	typeref:typename:unsigned short int	file:
flex_uint32_t	lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	typeref:typename:uint32_t	file:
flex_uint32_t	lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	typeref:typename:unsigned int	file:
flex_uint8_t	lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	typeref:typename:uint8_t	file:
flex_uint8_t	lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	typeref:typename:unsigned char	file:
getblock	nalloc.c	/^static void getblock(size_t n) {$/;"	f	typeref:typename:void	file:
i	shadosh.h	/^        int i;$/;"	m	union:Node::__anon5cf01dc5020a	typeref:typename:int
init_args	args.c	/^Args init_args(Args args) {$/;"	f	typeref:typename:Args
init_sh	shadosh.c	/^void init_sh () {$/;"	f	typeref:typename:void
install	Makefile	/^install:$/;"	t
keyword	y.tab.c	/^    char *keyword, *c;$/;"	m	union:YYSTYPE	typeref:typename:char *	file:
l	shadosh.h	/^    int l, r;$/;"	m	struct:Pipe	typeref:typename:int
last_w	node.c	/^extern Wordlist *last_w(Wordlist *word) {$/;"	f	typeref:typename:Wordlist *
lex.yy.c	Makefile	/^lex.yy.c: y.tab.c parse.l$/;"	t
line	parse.y	/^line       : cmd $/;"	l
main	shadosh.h	/^    char *main, **args;$/;"	m	struct:Args	typeref:typename:char *
main	y.tab.c	/^int main () { \/\/ int argc, char* argv[]) {$/;"	f	typeref:typename:int
mem	nalloc.c	/^	char *mem;$/;"	m	struct:Block	typeref:typename:char *	file:
mmem	shadosh.h	/^#define mmem(/;"	d
n	nalloc.c	/^	Block *n;$/;"	m	struct:Block	typeref:typename:Block *	file:
n	shadosh.h	/^        Node *n;$/;"	m	union:Node::__anon5cf01dc5020a	typeref:typename:Node *
n	y.tab.c	/^    int n;$/;"	m	union:YYSTYPE	typeref:typename:int	file:
nalloc	nalloc.c	/^extern void *nalloc(size_t n) {$/;"	f	typeref:typename:void *
nalnew	shadosh.h	/^#define nalnew(/;"	d
ndAND	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndArgs	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndBasic	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndBody	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndCompound	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndElse	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndIf	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndOR	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndPipe	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
ndWord	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	e	enum:node_e
new_node	node.c	/^extern Node* new_node(enum node_e nt, ...) {$/;"	f	typeref:typename:Node *
newblock	nalloc.c	/^extern Block *newblock() {$/;"	f	typeref:typename:Block *
next	shadosh.h	/^    Wordlist *next;$/;"	m	struct:Wordlist	typeref:typename:Wordlist *
nfree	nalloc.c	/^extern void nfree() {$/;"	f	typeref:typename:void
nlop	parse.y	/^nlop       : \/* empty *\/$/;"	l
node_e	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	g
node_e	shadosh.h	/^typedef enum node_e { ndPipe, ndArgs, ndBody, ndIf, ndElse, ndCompound, ndBasic, ndOR, ndAND, nd/;"	t	typeref:enum:node_e
node_s	y.tab.c	/^    struct Node *node_s;$/;"	m	union:YYSTYPE	typeref:struct:Node *	file:
nt	shadosh.h	/^    node_e nt;$/;"	m	struct:Node	typeref:typename:node_e
offsetof	shadosh.h	/^#define offsetof(/;"	d
pipe	y.tab.c	/^    struct Pipe pipe;$/;"	m	union:YYSTYPE	typeref:struct:Pipe	file:
prompt	shadosh.c	/^ssize_t prompt(const char* prompt, char* in){\/\/, size_t *in_len) {$/;"	f	typeref:typename:ssize_t
r	shadosh.h	/^    int l, r;$/;"	m	struct:Pipe	typeref:typename:int
restoreblock	nalloc.c	/^extern void restoreblock(Block *old) {$/;"	f	typeref:typename:void
sa_cmd	parse.y	/^sa_cmd     : cmd '&'$/;"	l
san_cmd	parse.y	/^san_cmd    : sa_cmd$/;"	l
shadosh	Makefile	/^shadosh: $(OBJ)$/;"	t
shadosh	parse.y	/^shadosh    : line end       { tree = $1; YYACCEPT; }$/;"	l
show_dir	shadosh.c	/^void show_dir() {$/;"	f	typeref:typename:void
size	nalloc.c	/^	size_t used, size;$/;"	m	struct:Block	typeref:typename:size_t	file:
tree	y.tab.c	/^Node *tree;$/;"	v	typeref:typename:Node *
ul	nalloc.c	/^} *fl, *ul;$/;"	v	typeref:struct:Block **
un	shadosh.h	/^    } *un;$/;"	m	struct:Node	typeref:union:Node::__anon5cf01dc5020a *
uninstall	Makefile	/^uninstall:$/;"	t
unput	lex.yy.c	/^#define unput(/;"	d	file:
used	nalloc.c	/^	size_t used, size;$/;"	m	struct:Block	typeref:typename:size_t	file:
w	shadosh.h	/^        char *w;$/;"	m	union:Node::__anon5cf01dc5020a	typeref:typename:char *
w	shadosh.h	/^    char *w;$/;"	m	struct:Wordlist	typeref:typename:char *
word	parse.y	/^word       : WORD                   { $$ = new_node(ndWord, $1.w); };$/;"	l
word	y.tab.c	/^    struct Wordlist word;$/;"	m	union:YYSTYPE	typeref:struct:Wordlist	file:
y	lex.yy.c	/^YYSTYPE *y = &yylval;$/;"	v	typeref:typename:YYSTYPE *
y.tab.c	Makefile	/^y.tab.c: parse.y$/;"	t
yy_accept	lex.yy.c	/^static const flex_int16_t yy_accept[52] =$/;"	v	typeref:typename:const flex_int16_t[52]	file:
yy_acclist	lex.yy.c	/^static const flex_int16_t yy_acclist[113] =$/;"	v	typeref:typename:const flex_int16_t[113]	file:
yy_act	lex.yy.c	/^	int yy_act;$/;"	v	typeref:typename:int
yy_amount_of_matched_text	lex.yy.c	/^		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;$/;"	v	typeref:typename:int
yy_at_bol	lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_base	lex.yy.c	/^static const flex_int16_t yy_base[58] =$/;"	v	typeref:typename:const flex_int16_t[58]	file:
yy_bp	lex.yy.c	/^	char *yy_cp, *yy_bp;$/;"	v	typeref:typename:char **
yy_bs_column	lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_bs_lineno	lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_buf_pos	lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	typeref:typename:char *	file:
yy_buf_size	lex.yy.c	/^	int yy_buf_size;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_buffer_stack	lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = NULL; \/**< Stack as an array. *\/$/;"	v	typeref:typename:YY_BUFFER_STATE *	file:
yy_buffer_stack_max	lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	typeref:typename:size_t	file:
yy_buffer_stack_top	lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	typeref:typename:size_t	file:
yy_buffer_state	lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_c	lex.yy.c	/^			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;$/;"	v	typeref:typename:YY_CHAR
yy_c_buf_p	lex.yy.c	/^static char *yy_c_buf_p = NULL;$/;"	v	typeref:typename:char *	file:
yy_ch_buf	lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	typeref:typename:char *	file:
yy_chk	lex.yy.c	/^static const flex_int16_t yy_chk[146] =$/;"	v	typeref:typename:const flex_int16_t[146]	file:
yy_cp	lex.yy.c	/^	char *yy_cp, *yy_bp;$/;"	v	typeref:typename:char *
yy_create_buffer	lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_current_state	lex.yy.c	/^	yy_state_type yy_current_state;$/;"	v	typeref:typename:yy_state_type
yy_def	lex.yy.c	/^static const flex_int16_t yy_def[58] =$/;"	v	typeref:typename:const flex_int16_t[58]	file:
yy_delete_buffer	lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f	typeref:typename:void
yy_did_buffer_switch_on_eof	lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	typeref:typename:int	file:
yy_ec	lex.yy.c	/^static const YY_CHAR yy_ec[256] =$/;"	v	typeref:typename:const YY_CHAR[256]	file:
yy_fatal_error	lex.yy.c	/^static void yynoreturn yy_fatal_error (const char* msg )$/;"	f	typeref:typename:void yynoreturn	file:
yy_fill_buffer	lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_flex_debug	lex.yy.c	/^int yy_flex_debug = 0;$/;"	v	typeref:typename:int
yy_flex_strlen	lex.yy.c	/^static int yy_flex_strlen (const char * s )$/;"	f	typeref:typename:int	file:
yy_flex_strncpy	lex.yy.c	/^static void yy_flex_strncpy (char* s1, const char * s2, int n )$/;"	f	typeref:typename:void	file:
yy_flush_buffer	lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f	typeref:typename:void
yy_full_match	lex.yy.c	/^static char *yy_full_match;$/;"	v	typeref:typename:char *	file:
yy_get_next_buffer	lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	typeref:typename:int	file:
yy_get_previous_state	lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	typeref:typename:yy_state_type	file:
yy_hold_char	lex.yy.c	/^static char yy_hold_char;$/;"	v	typeref:typename:char	file:
yy_init	lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	typeref:typename:int	file:
yy_init_buffer	lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	typeref:typename:void	file:
yy_init_globals	lex.yy.c	/^static int yy_init_globals (void)$/;"	f	typeref:typename:int	file:
yy_input_file	lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	typeref:typename:FILE *	file:
yy_is_interactive	lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_is_our_buffer	lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_load_buffer_state	lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	typeref:typename:void	file:
yy_lp	lex.yy.c	/^static int yy_lp;$/;"	v	typeref:typename:int	file:
yy_meta	lex.yy.c	/^static const YY_CHAR yy_meta[17] =$/;"	v	typeref:typename:const YY_CHAR[17]	file:
yy_n_chars	lex.yy.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_n_chars	lex.yy.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	typeref:typename:int	file:
yy_new_buffer	lex.yy.c	/^#define yy_new_buffer /;"	d	file:
yy_next_state	lex.yy.c	/^			yy_state_type yy_next_state;$/;"	v	typeref:typename:yy_state_type
yy_nxt	lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	typeref:typename:flex_int32_t	file:
yy_nxt	lex.yy.c	/^static const flex_int16_t yy_nxt[146] =$/;"	v	typeref:typename:const flex_int16_t[146]	file:
yy_reduce_print	y.tab.c	/^yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp,$/;"	f	typeref:typename:void	file:
yy_scan_buffer	lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_scan_bytes	lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_scan_string	lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (const char * yystr )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_set_bol	lex.yy.c	/^#define yy_set_bol(/;"	d	file:
yy_set_interactive	lex.yy.c	/^#define yy_set_interactive(/;"	d	file:
yy_size_t	lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	typeref:typename:size_t	file:
yy_stack_print	y.tab.c	/^yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)$/;"	f	typeref:typename:void	file:
yy_start	lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	typeref:typename:int	file:
yy_state_buf	lex.yy.c	/^static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;$/;"	v	typeref:typename:yy_state_type *	file:
yy_state_fast_t	y.tab.c	/^typedef int yy_state_fast_t;$/;"	t	typeref:typename:int	file:
yy_state_ptr	lex.yy.c	/^static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;$/;"	v	typeref:typename:yy_state_type **	file:
yy_state_t	y.tab.c	/^typedef yytype_int8 yy_state_t;$/;"	t	typeref:typename:yytype_int8	file:
yy_state_type	lex.yy.c	/^typedef int yy_state_type;$/;"	t	typeref:typename:int	file:
yy_switch_to_buffer	lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f	typeref:typename:void
yy_symbol_print	y.tab.c	/^yy_symbol_print (FILE *yyo,$/;"	f	typeref:typename:void	file:
yy_symbol_value_print	y.tab.c	/^yy_symbol_value_print (FILE *yyo,$/;"	f	typeref:typename:void	file:
yy_trans_info	lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	typeref:typename:yy_state_type	file:
yy_verify	lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	typeref:typename:flex_int32_t	file:
yyalloc	lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f	typeref:typename:void *
yyalloc	y.tab.c	/^union yyalloc$/;"	u	file:
yychar	y.tab.c	/^int yychar;$/;"	v	typeref:typename:int
yycheck	y.tab.c	/^static const yytype_int8 yycheck[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyclearin	y.tab.c	/^#define yyclearin /;"	d	file:
yyconst	lex.yy.c	/^#define yyconst /;"	d	file:
yydebug	y.tab.c	/^int yydebug;$/;"	v	typeref:typename:int
yydefact	y.tab.c	/^static const yytype_int8 yydefact[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yydefgoto	y.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yydestruct	y.tab.c	/^yydestruct (const char *yymsg,$/;"	f	typeref:typename:void	file:
yyensure_buffer_stack	lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	typeref:typename:void	file:
yyerrok	y.tab.c	/^#define yyerrok /;"	d	file:
yyerror	y.tab.c	/^void yyerror (char *s) { fprintf (stderr, "%s\\n", s); }$/;"	f	typeref:typename:void
yyfree	lex.yy.c	/^void yyfree (void * ptr )$/;"	f	typeref:typename:void
yyget_debug	lex.yy.c	/^int yyget_debug  (void)$/;"	f	typeref:typename:int
yyget_in	lex.yy.c	/^FILE *yyget_in  (void)$/;"	f	typeref:typename:FILE *
yyget_leng	lex.yy.c	/^int yyget_leng  (void)$/;"	f	typeref:typename:int
yyget_lineno	lex.yy.c	/^int yyget_lineno  (void)$/;"	f	typeref:typename:int
yyget_out	lex.yy.c	/^FILE *yyget_out  (void)$/;"	f	typeref:typename:FILE *
yyget_text	lex.yy.c	/^char *yyget_text  (void)$/;"	f	typeref:typename:char *
yyin	lex.yy.c	/^FILE *yyin = NULL, *yyout = NULL;$/;"	v	typeref:typename:FILE *
yyinput	lex.yy.c	/^    static int yyinput (void)$/;"	f	typeref:typename:int	file:
yyleng	lex.yy.c	/^int yyleng;$/;"	v	typeref:typename:int
yyless	lex.yy.c	/^#define yyless(/;"	d	file:
yylex_destroy	lex.yy.c	/^int yylex_destroy  (void)$/;"	f	typeref:typename:int
yylineno	lex.yy.c	/^int yylineno = 1;$/;"	v	typeref:typename:int
yylval	y.tab.c	/^YYSTYPE yylval;$/;"	v	typeref:typename:YYSTYPE
yymore	lex.yy.c	/^#define yymore(/;"	d	file:
yynerrs	y.tab.c	/^int yynerrs;$/;"	v	typeref:typename:int
yynoreturn	lex.yy.c	/^#define yynoreturn /;"	d	file:
yynoreturn	lex.yy.c	/^#define yynoreturn$/;"	d	file:
yyout	lex.yy.c	/^FILE *yyin = NULL, *yyout = NULL;$/;"	v	typeref:typename:FILE **
yypact	y.tab.c	/^static const yytype_int8 yypact[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yypact_value_is_default	y.tab.c	/^#define yypact_value_is_default(/;"	d	file:
yyparse	y.tab.c	/^yyparse (void)$/;"	f	typeref:typename:int
yyparse	y.tab.h	/^int yyparse (void);$/;"	f
yypgoto	y.tab.c	/^static const yytype_int8 yypgoto[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yypop_buffer_state	lex.yy.c	/^void yypop_buffer_state (void)$/;"	f	typeref:typename:void
yypush_buffer_state	lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f	typeref:typename:void
yyr1	y.tab.c	/^static const yytype_int8 yyr1[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyr2	y.tab.c	/^static const yytype_int8 yyr2[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyrealloc	lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f	typeref:typename:void *
yyrestart	lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f	typeref:typename:void
yyrline	y.tab.c	/^static const yytype_int8 yyrline[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyset_debug	lex.yy.c	/^void yyset_debug (int  _bdebug )$/;"	f	typeref:typename:void
yyset_in	lex.yy.c	/^void yyset_in (FILE *  _in_str )$/;"	f	typeref:typename:void
yyset_lineno	lex.yy.c	/^void yyset_lineno (int  _line_number )$/;"	f	typeref:typename:void
yyset_out	lex.yy.c	/^void yyset_out (FILE *  _out_str )$/;"	f	typeref:typename:void
yyss_alloc	y.tab.c	/^  yy_state_t yyss_alloc;$/;"	m	union:yyalloc	typeref:typename:yy_state_t	file:
yystos	y.tab.c	/^static const yytype_int8 yystos[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yysymbol_kind_t	y.tab.c	/^enum yysymbol_kind_t$/;"	g	file:
yysymbol_kind_t	y.tab.c	/^typedef enum yysymbol_kind_t yysymbol_kind_t;$/;"	t	typeref:enum:yysymbol_kind_t	file:
yysymbol_name	y.tab.c	/^yysymbol_name (yysymbol_kind_t yysymbol)$/;"	f	typeref:typename:const char *	file:
yytable	y.tab.c	/^static const yytype_int8 yytable[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yytable_value_is_error	y.tab.c	/^#define yytable_value_is_error(/;"	d	file:
yyterminate	lex.yy.c	/^#define yyterminate(/;"	d	file:
yytext	lex.yy.c	/^char *yytext;$/;"	v	typeref:typename:char *
yytext_ptr	lex.yy.c	/^#define yytext_ptr /;"	d	file:
yytname	y.tab.c	/^static const char *const yytname[] =$/;"	v	typeref:typename:const char * const[]	file:
yytoken_kind_t	y.tab.c	/^  typedef enum yytokentype yytoken_kind_t;$/;"	t	typeref:enum:yytokentype	file:
yytoken_kind_t	y.tab.h	/^  typedef enum yytokentype yytoken_kind_t;$/;"	t
yytokentype	y.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	y.tab.h	/^  typedef enum yytokentype yytoken_kind_t;$/;"	e
yytoknum	y.tab.c	/^static const yytype_int16 yytoknum[] =$/;"	v	typeref:typename:const yytype_int16[]	file:
yytranslate	y.tab.c	/^static const yytype_int8 yytranslate[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yytype_int16	y.tab.c	/^typedef __INT_LEAST16_TYPE__ yytype_int16;$/;"	t	typeref:typename:__INT_LEAST16_TYPE__	file:
yytype_int16	y.tab.c	/^typedef int_least16_t yytype_int16;$/;"	t	typeref:typename:int_least16_t	file:
yytype_int16	y.tab.c	/^typedef short yytype_int16;$/;"	t	typeref:typename:short	file:
yytype_int8	y.tab.c	/^typedef __INT_LEAST8_TYPE__ yytype_int8;$/;"	t	typeref:typename:__INT_LEAST8_TYPE__	file:
yytype_int8	y.tab.c	/^typedef int_least8_t yytype_int8;$/;"	t	typeref:typename:int_least8_t	file:
yytype_int8	y.tab.c	/^typedef signed char yytype_int8;$/;"	t	typeref:typename:signed char	file:
yytype_uint16	y.tab.c	/^typedef __UINT_LEAST16_TYPE__ yytype_uint16;$/;"	t	typeref:typename:__UINT_LEAST16_TYPE__	file:
yytype_uint16	y.tab.c	/^typedef int yytype_uint16;$/;"	t	typeref:typename:int	file:
yytype_uint16	y.tab.c	/^typedef uint_least16_t yytype_uint16;$/;"	t	typeref:typename:uint_least16_t	file:
yytype_uint16	y.tab.c	/^typedef unsigned short yytype_uint16;$/;"	t	typeref:typename:unsigned short	file:
yytype_uint8	y.tab.c	/^typedef __UINT_LEAST8_TYPE__ yytype_uint8;$/;"	t	typeref:typename:__UINT_LEAST8_TYPE__	file:
yytype_uint8	y.tab.c	/^typedef short yytype_uint8;$/;"	t	typeref:typename:short	file:
yytype_uint8	y.tab.c	/^typedef uint_least8_t yytype_uint8;$/;"	t	typeref:typename:uint_least8_t	file:
yytype_uint8	y.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	typeref:typename:unsigned char	file:
yyunput	lex.yy.c	/^    static void yyunput (int c, char * yy_bp )$/;"	f	typeref:typename:void	file:
yyvs_alloc	y.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	typeref:typename:YYSTYPE	file:
yywrap	lex.yy.c	/^int yywrap (void) { return 1; }$/;"	f	typeref:typename:int
